---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "allure-testops.report.fullname" . }}
  labels:
    app: {{ template "allure-testops.report.fullname" . }}
    version: v1
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.report.replicaCount }}
  serviceName: {{ template "allure-testops.report.fullname" . }}
  selector:
    matchLabels:
      app: {{ template "allure-testops.report.fullname" . }}
      version: v1
  template:
    metadata:
      labels:
        app: {{ template "allure-testops.report.fullname" . }}
        version: v1
{{- if .Values.report.annotations }}
      annotations:
{{- range $key, $value := .Values.report.annotations }}
        {{ $key }}: {{ $value | quote }}
{{- end }}
{{- end }}
    spec:
      terminationGracePeriodSeconds: 30
{{- if .Values.rbac.enabled }}
      serviceAccountName: {{ .Values.rbac.serviceAccountName }}
{{- end }}
      imagePullSecrets:
        - name: {{ .Values.registry.imagePullSecret }}
      tolerations:
{{ toYaml .Values.report.tolerations | indent 8 }}
{{- if .Values.report.affinity }}
      affinity:
{{ toYaml .Values.report.affinity | indent 8 }}
{{- end }}
{{- if .Values.report.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.report.nodeSelector | indent 8 }}
{{- end }}
      initContainers:
        - name: db-readiness-check
          image: {{ .Values.postgresql.init.image | quote }}
{{- with .Values.postgresql.init.resources }}
          resources:
{{ toYaml . | indent 12 }}
{{- end }}
          command: [ 'sh', '-c',
            'until pg_isready -h {{ template "reportDBHost" . }} -p {{ template "reportDBPort" . }};
             do echo waiting for database; sleep 2; done;' ]
{{- if .Values.certificates.configmapName }}
        - name: certs-init
          image: amazoncorretto:17
          imagePullPolicy: {{ .Values.registry.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              mkdir -p /etc/pki/ca-trust/extracted/{java,pem,openssl,edk2} &&
              update-ca-trust &&
              keytool -alias trust-bundle.pem -import -keystore /etc/pki/ca-trust/extracted/java/cacerts -file /etc/pki/ca-trust/source/anchors/trust-bundle.pem -storepass changeit -noprompt
          volumeMounts:
            - name: ssl-path
              mountPath: "/etc/pki/ca-trust/extracted"
            - name: certs
              mountPath: /etc/pki/ca-trust/source/anchors
              readOnly: true
          securityContext:
            runAsUser: 0
{{- end }}
{{- $secret_name := include "allure-testops.secret.name" . }}
      containers:
        - name: {{ template "allure-testops.report.fullname" . }}
          image: "{{ template "getImageRegistry" . }}{{ .Values.report.image }}:{{ .Values.version | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.registry.pullPolicy }}
{{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
{{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.report.service.port }}
          env:
{{- if not .Values.allure.manualConfig }}
            - name: SERVER_PORT
              value: "{{ .Values.report.service.port }}"
{{- include "renderCommonEnvs" . | indent 10 }}
{{- include "renderCrypto" . | indent 10 }}
            - name: JAVA_TOOL_OPTIONS
{{- if .Values.proxy.enabled }}
              value: "{{ template "renderJavaOpts" .Values.report.resources.requests.memory }} -Dhttps.proxyHost={{ .Values.proxy.proxyHost }} -Dhttp.proxyHost={{ .Values.proxy.proxyHost }} -Dhttps.proxyPort={{ .Values.proxy.proxyPort }} -Dhttp.proxyPort={{ .Values.proxy.proxyPort }} -Dhttps.nonProxyHosts={{ .Values.proxy.nonProxy }} -Dhttp.nonProxyHosts={{ .Values.proxy.nonProxy }} -Djavax.net.ssl.trustStore=/etc/pki/ca-trust/extracted/java/cacerts -Djavax.net.ssl.trustStorePassword=changeit"
{{- else }}
              value: "{{ template "renderJavaOpts" .Values.report.resources.requests.memory }}"
{{- end }}
            - name: SPRING_RABBITMQ_ADDRESSES
              value: {{ template "rabbitHost" . }}
{{- if or (eq .Values.postgresql.external.sslMode "require") (eq .Values.postgresql.external.sslMode "verify-ca") (eq .Values.postgresql.external.sslMode "verify-full") }}
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://{{ template "reportDBHost" . }}:{{ template "reportDBPort" . }}/{{ template "reportDBName" . }}?sslmode={{ template "postgresSSL" . }}&sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory"
{{- else }}
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://{{ template "reportDBHost" . }}:{{ template "reportDBPort" . }}/{{ template "reportDBName" . }}?sslmode={{ template "postgresSSL" . }}"
{{- end }}
{{- if eq .Values.fs.type "S3" }}
            - name: {{ .Values.build }}_BLOBSTORAGE_TYPE
              value: S3
{{- include "renderS3Envs" . | indent 10 }}
{{- else }}
            - name: {{ .Values.build }}_BLOBSTORAGE_TYPE
              value: FILE_SYSTEM
            - name: {{ .Values.build }}_BLOBSTORAGE_FILESYSTEM_DIRECTORY
              value: "{{ .Values.fs.csiStorage.mountPoint }}"
{{- end }}
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: "reportDbUser"
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: "reportDbPass"
            - name: SPRING_DATASOURCE_HIKARI_MAXIMUMPOOLSIZE
              value: "{{ .Values.report.maxDBConn }}"
            - name: SPRING_DATASOURCE_HIKARI_CONNECTIONTIMEOUT
              value: "{{ .Values.postgresql.connectionTimeout }}"
            - name: SPRING_RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: "rabbitUser"
            - name: SPRING_RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: "rabbitPass"
            - name: SPRING_RABBITMQ_VIRTUAL_HOST
              value: {{ .Values.rabbitmq.external.vhost }}
            - name: SPRING_RABBITMQ_LISTENER_SIMPLE_MAXCONCURRENCY
              value: "{{ .Values.report.maxConcurrency }}"
            - name: SERVER_SERVLET_CONTEXTPATH
              value: "{{ .Values.allure.reportContextPath }}"
            - name: LOGGING_LEVEL_IO_QAMETA_ALLURE_REPORT_ISSUE_LISTENER
              value: "error"
            - name: LOGGING_LEVEL_COM_ZAXXER_HIKARI
              value: "{{ .Values.allure.logging }}"
            - name: ALLURE_UPLOAD_PARSE_CONSUMERSPERQUEUE
              value: {{ .Values.report.uploads.parseConsumers | quote }}
            - name: ALLURE_UPLOAD_STORE_CONSUMERSPERQUEUE
              value: {{ .Values.report.uploads.storeConsumers | quote }}
            - name: ALLURE_TASKEXECUTOR_COREPOOLSIZE
              value: {{ .Values.report.taskExecutorCorePoolSize | quote }}
{{- if .Values.report.cache.enabled }}
            - name: SPRING_REDIS_HOST
              value: "{{ template "allure-testops.redis.fullname" . }}"
            - name: SPRING_REDIS_PORT
              value: "{{ .Values.redis.port }}"
            - name: SPRING_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: "redisPass"
            - name: ALLURE_CACHE-TTL_ENABLED
              value: {{ .Values.report.cache.enabled | quote }}
            - name: ALLURE_CACHE-TTL_BY-DEFAULT
              value: {{ .Values.report.cache.ttlByDefault }}
            - name: ALLURE_CACHE-TTL_WIDGETS_AUTOMATION-TREND
              value: {{ .Values.report.cache.ttlWidgetsAutomationTrend }}
            - name: ALLURE_CACHE-TTL_WIDGETS_PROJECT-METRIC-TREND
              value: {{ .Values.report.cache.ttlWidgetsProjectMetricTrend }}
            - name: ALLURE_CACHE-TTL_WIDGETS_LAUNCH-DURATION-HISTOGRAM
              value: {{ .Values.report.cache.ttlWidgetsLaunchDurationHistogram }}
            - name: ALLURE_CACHE-TTL_WIDGETS_ANALYTIC-PIE-CHART
              value: {{ .Values.report.cache.ttlWidgetsAnalyticPieChart }}
            - name: ALLURE_CACHE-TTL_WIDGETS_TR-COMPLEX-TREND
              value: {{ .Values.report.cache.ttlWidgetsTrComplexTrend }}
            - name: ALLURE_CACHE-TTL_WIDGETS_TR-STATISTIC-TREND
              value: {{ .Values.report.cache.ttlWidgetsTrStatisticTrend }}
            - name: ALLURE_CACHE-TTL_WIDGETS_TC-LAST-RESULT
              value: {{ .Values.report.cache.ttlWidgetsTcLastResult }}
{{- end}}
{{- if .Values.proxy.enabled }}
            - name: http_proxy
              value: "http://{{ .Values.proxy.proxyHost }}:{{ .Values.proxy.proxyPort }}"
            - name: HTTP_PROXY
              value: "http://{{ .Values.proxy.proxyHost }}:{{ .Values.proxy.proxyPort }}"
            - name: https_proxy
              value: "http://{{ .Values.proxy.proxyHost }}:{{ .Values.proxy.proxyPort }}"
            - name: HTTPS_PROXY
              value: "http://{{ .Values.proxy.proxyHost }}:{{ .Values.proxy.proxyPort }}"
            - name: no_proxy
              value: "{{ .Values.proxy.noProxy }}"
            - name: NO_PROXY
              value: "{{ .Values.proxy.noProxy }}"
{{- end }}
{{- if or (eq .Values.postgresql.external.sslMode "require") (eq .Values.postgresql.external.sslMode "verify-ca") (eq .Values.postgresql.external.sslMode "verify-full") }}
            - name: TLS_DB_ENDPOINTS
              value: "{{ .Values.postgresql.external.reportHost}}:{{ .Values.postgresql.external.reportPort }}"
{{- end }}
{{- if .Values.certificates.endpoints }}
            - name: TLS_ENDPOINTS
              value: "{{ .Values.certificates.endpoints }}"
{{- end }}

{{- if .Values.certificates.staticCerts }}
            - name: STATIC_CERTS
              value: "{{ join "," .Values.certificates.staticCerts }}"
{{- end }}
{{- range $name, $value := .Values.report.env.open }}
            - name: {{ $name | quote }}
              value: {{ $value | quote }}
{{- end }}
{{- end }}
{{- if .Values.report.probes.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.allure.reportContextPath }}management/health
              port: http
{{ toYaml .Values.report.probes.liveness.probe | indent 12 }}
          readinessProbe:
            httpGet:
              path: {{ .Values.allure.reportContextPath }}management/health
              port: http
{{ toYaml .Values.report.probes.readiness.probe | indent 12 }}
{{- end }}
{{- with .Values.report.resources }}
          resources:
{{ toYaml . | indent 12 }}
{{- end }}
          volumeMounts:
{{- if eq .Values.fs.type "CSI" }}
            - mountPath: {{ .Values.fs.csiStorage.mountPoint }}
              name: storage
{{- end }}
{{- if .Values.vault.enabled }}
            - name: vault-creds
              mountPath: "{{ .Values.vault.mountPath }}"
              readOnly: true
{{- end }}
{{- if .Values.certificates.configmapName }}
            - name: ssl-path
              mountPath: "/etc/pki/ca-trust/extracted"
{{- end }}
      volumes:
{{- if eq .Values.fs.type "CSI" }}
        - name: storage
          persistentVolumeClaim:
            claimName: {{ template "allure-testops.report.fullname" . }}
{{- end }}
{{- if .Values.vault.enabled }}
        - name: vault-creds
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ template "allure-testops.fullname" . }}
{{- end }}
{{- if .Values.certificates.configmapName }}
        - name: certs
          configMap:
            name: {{ .Values.certificates.configmapName }}
        - name: ssl-path
          emptyDir: {}
{{- end }}
